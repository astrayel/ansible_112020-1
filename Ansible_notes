Doc Ansible :
https://docs.ansible.com/

Installation classique apt (sans se soucier de la version)
$ sudo apt update
$ sudo apt install ansible

Test commande et version : 
$ ansible --version


Configuraton environnement Ansible : ansible.cfg
$ ansible-config list
$ ansible-config view ansible.cfg

=> Poids du fichier : /etc/ansible, répertoire où l'on est positionné.



-------------------------------------
## Installation Ansible en virtualenv
-------------------------------------
Prérequis : python3, python3-pip, python3-venv

$ sudo apt install python3 python3-pip python3-venv

Creation d'un virtualenv python3 pour notre projet ansible 
$ python3 -m venv /home/vagrant/ansible_venv_2.10

Activation du virtualenv 
$ source /home/vagrant/ansible_venv_2.10/bin/activate

Installation de la version ansible désirée
$ pip3 install ansible==2.10

Installation d'un linter ansible
$ pip3 install ansible-lint
$ ansible-lint playbook.yml

Check version :
ansible --version

Quitter environnement :
deactivate

-----------------------------------------------------------------------
## Gestion des prérequis librairies/packages pip nécessaire au projets
-----------------------------------------------------------------------
=> Création d'un fichier requirements.txt qui contient les packages pip requis pour le projet Ansible
=> Déclenchement de l'installation : $ pip3 install -r requirements.txt

----------------------------------
## GIT , HOOKS
----------------------------------
Association d'un lancement d'un script lors d'une opération GIT
=> .git/hooks
=> pre-commit






-------------------------------
## Fichier d'inventaire
-------------------------------
https://docs.ansible.com/ansible/2.3/intro_inventory.html
https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html

Commandes utiles : ansible-inventory
$ ansible-inventory --graph
$ ansible-inventory --list
$ ansible-inventory --list -y


-------------------------------
## Mode AD-Hoc
-------------------------------
  Binaire ansible   fichier d'inventaire    utilisation d'un module ping     Target : public de nodes    Parametre du module
$    ansible            -i hosts                     -m ping                       all
$    ansible            -i hosts                     -m ping                       srv01
$    ansible            -i hosts                     -m ping                       all                     -a "data=test"

  Binaire ansible     fichier d'inventaire      utilisation mode raw              Target : public de nodes
$    ansible              -i hosts                 -a "cat /etc/passwd"                    all

  Binaire ansible   fichier d'inventaire    utilisation d'un module package     Target : public de nodes    Parametre du module
$    ansible            -i hosts                     -m package                       all                  -a "name=curl state=present"

Lister les module 

Elevation de privilège :
--become
--ask-become-pass



----------------------------
## Langage YAML
----------------------------
https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html


----------------------------
## Playbook Ansible
----------------------------
 
$ ansible-playbook -i hosts premier_playbook.yml
$ ansible-playbook -i hosts premier_playbook.yml --syntax-check
$ ansible-playbook -i hosts premier_playbook.yml --check

Utilisation du paramètre : extra_vars (magic variable) : -e (Poids le plus fort de la variable)
$ ansible-playbook -i hosts premier_playbook.yml -e key_status=absent

Outils pour lister le périmètre du playbook
$ ansible-playbook -i hosts premier_playbook.yml --list-hosts
$ ansible-playbook -i hosts premier_playbook.yml --list-tasks

Utilisation du paramètre --limit : application du playbook au node spécifié avec --limit


----------------------------------
## Facts 
----------------------------------
Module setup
Task créée par défaut au lancement d'un playbook
On peut la désactivée avec : gather_facts: false

Mode Ad-Hoc pour lister les facts d'un node :
$ ansible all -m ansible.builtin.setup
$ ansible all -m ansible.builtin.setup -a "filter=*distribution*"


----------------------------------
## LOOPS
----------------------------------
with_  => à partir d'ansible 2.5 : loop
https://docs.ansible.com/ansible/latest/user_guide/playbooks_loops.html


----------------------------------
## PASSWORD : hash, encryption VAULT
----------------------------------
Générer un mot de passe hashé :
$ ansible all -i localhost, -m debug -a "msg={{ 'formation123' | password_hash('sha512', 'password') }}"

Encrypter des données : VAULT 
https://docs.ansible.com/ansible/latest/user_guide/vault.html
$ ansible-vault

$ ansible-vault encrypt_string -n secret1 "enormesecret"
New Vault password: => mot de passe qui sert à encrypter et qui sera demandé pour décrypter
Confirm New Vault password: 
secret1: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          34633064343837333833326331336531643231623430336236356535393965336564656262663338
          3761653061626639393062313635663864663631333734350a376366393834353232626230363565
          31646633376138313236343036306461333737313131326233396134373132303639666137376262
          3265303365363434300a333039653861313739306363646533323630396634353265306166303539
          6335
Encryption successful

$ ansible-playbook demo_vault_playbook.yml  --ask-vault-password

Encryption fichier :
$ ansible-vault encrypt secret_file.yml
$ ansible-vault view secret_file.yml
$ ansible-vault decrypt secret_file.yml

Vault-id :
Config dans ansible.cfg puis : 
Encryption avec un vault-id
$ ansible-playbook --vault-id formation --ask-vault-pass demo_vault_playbook.yml 

Décryption : (préciser le fichier de password )
$ ansible-playbook --vault-id .formation.secret --ask-vault-pass demo_vault_playbook.yml

------------------------------
## NOTIFY handlers
------------------------------
https://docs.ansible.com/ansible/latest/user_guide/playbooks_handlers.html


---------------------------------------------
## Fichiers dynamiques / Templates => JINJA
---------------------------------------------
=> utilisation du module template :
https://docs.ansible.com/ansible/latest/collections/ansible/builtin/template_module.html



-------------------------------------
## Mode BLOCK
-------------------------------------
https://docs.ansible.com/ansible/latest/user_guide/playbooks_blocks.html


-------------------------------------
## ROLES ANSIBLE : ANSIBLE GALAXY
-------------------------------------

Les rôle sont des unités de travail Ansible
=> permettent d'exécuter des tâche de préférence unitaire
=> Règles préconisées : indépendant
                        idempotent
                        testable
                        réutilisable
                        
https://galaxy.ansible.com/

Commande : ansible-galaxy

Creer notre structure de rôle et notre premier rôle
$ mkdir roles
$ ansible-galaxy init roles/bootstrap


Gérer les installations de rôles avec requirements.yml
https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#install-multiple-collections-with-a-requirements-file


----------------------------------------------
## PRECEDENCE des VARIABLES (poids, surcharge)
----------------------------------------------
https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#variable-precedence-where-should-i-put-a-variable



----------------------------------------------
## FACT_CACHING
----------------------------------------------
https://docs.ansible.com/ansible/latest/plugins/cache.html
https://docs.ansible.com/ansible/2.5/plugins/cache.html
https://docs.ansible.com/ansible/2.4/intro_configuration.html#gathering


-------------------------------------------------
## ANSIBLE TAGS
-------------------------------------------------
https://docs.ansible.com/ansible/latest/user_guide/playbooks_tags.html

Lister les tags : 
$ ansible-playbook docker_playbook.yml --list-tasks

Lancer un playbook en utilisant les tags (seules les tasks, role...) disposant du tag sont exécutées
$ ansible-playbook docker_playbook.yml --tags docker_image,docker_container

Exécuter toutes les tasks tagguées:
$ ansible-playbook docker_playbook.yml --tags tagged

Ignorer un tag : 
$ ansible-playbook docker_playbook.yml --tags docker_commun --skip-tags docker_image


-------------------------------------------------
## ANSIBLE DELEGATION
-------------------------------------------------
https://docs.ansible.com/ansible/latest/user_guide/playbooks_delegation.html



--------------------------------------------------------------------
## ANSIBLE AWX / TOWER -> Interface graphique de management Ansible
--------------------------------------------------------------------
https://github.com/ansible/awx
https://docs.ansible.com/ansible-tower/index.html
https://github.com/ansible/awx/blob/devel/INSTALL.md

=> Une des méthode d'installation : Docker
   1°) => Prérequis : (via docker_playbook.yml)
           => Python3, Python3-pip
           => docker engine
           => docker-compose
   2°) => Sur serveur AWX : Déploiement Installer AWX manuelle
          => $ pip3 install ansible
          => $ source .profile (recharger le PATH)
          # Clone du dépot officiel AWX
          => $ git clone https://github.com/ansible/awx.git
          => $ cd awx/installer/
          => $ openssl rand -base64 30
          => Copier la clé dans inventory : secret_key={clé}
          => $ ansible-playbook -i inventory install.yml --become

